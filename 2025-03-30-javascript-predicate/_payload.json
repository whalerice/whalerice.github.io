[{"data":1,"prerenderedAt":358},["ShallowReactive",2],{"/2025-03-30-javascript-predicate":3},{"id":4,"title":5,"body":6,"date":347,"description":348,"extension":349,"image":350,"meta":351,"navigation":70,"path":352,"seo":353,"stem":354,"tags":355,"__hash__":357},"content/2025-03-30-javascript-predicate.md","자바스크립트 Predicate 이해하기",{"type":7,"value":8,"toc":334},"minimal",[9,13,17,22,25,38,42,47,130,134,209,213,240,244,248,277,281,324,327,330],[10,11,5],"h1",{"id":12},"자바스크립트-predicate-이해하기",[14,15,16],"p",{},"Predicate는 프로그래밍에서 참(true) 또는 거짓(false)을 반환하는 함수를 의미합니다. 자바스크립트에서 Predicate는 배열 메서드나 조건문에서 자주 사용되는 중요한 개념입니다.",[18,19,21],"h2",{"id":20},"predicate의-기본-개념","Predicate의 기본 개념",[14,23,24],{},"Predicate는 주로 다음과 같은 특징을 가집니다:",[26,27,28,32,35],"ol",{},[29,30,31],"li",{},"하나 이상의 매개변수를 받습니다",[29,33,34],{},"항상 boolean 값을 반환합니다",[29,36,37],{},"주로 조건을 검사하는 용도로 사용됩니다",[18,39,41],{"id":40},"자주-사용되는-predicate-예시","자주 사용되는 Predicate 예시",[43,44,46],"h3",{"id":45},"_1-배열-메서드에서의-predicate","1. 배열 메서드에서의 Predicate",[48,49,54],"pre",{"className":50,"code":51,"language":52,"meta":53,"style":53},"language-javascript shiki shiki-themes github-light","const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n// 짝수인지 확인하는 Predicate\nconst isEven = (num) => num % 2 === 0;\n\n// filter 메서드에서 Predicate 사용\nconst evenNumbers = numbers.filter(isEven);\nconsole.log(evenNumbers); // [2, 4, 6, 8, 10]\n\n// some 메서드에서 Predicate 사용\nconst hasEvenNumber = numbers.some(isEven);\nconsole.log(hasEvenNumber); // true\n","javascript","",[55,56,57,65,72,78,84,89,95,101,107,112,118,124],"code",{"__ignoreMap":53},[58,59,62],"span",{"class":60,"line":61},"line",1,[58,63,64],{},"const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n",[58,66,68],{"class":60,"line":67},2,[58,69,71],{"emptyLinePlaceholder":70},true,"\n",[58,73,75],{"class":60,"line":74},3,[58,76,77],{},"// 짝수인지 확인하는 Predicate\n",[58,79,81],{"class":60,"line":80},4,[58,82,83],{},"const isEven = (num) => num % 2 === 0;\n",[58,85,87],{"class":60,"line":86},5,[58,88,71],{"emptyLinePlaceholder":70},[58,90,92],{"class":60,"line":91},6,[58,93,94],{},"// filter 메서드에서 Predicate 사용\n",[58,96,98],{"class":60,"line":97},7,[58,99,100],{},"const evenNumbers = numbers.filter(isEven);\n",[58,102,104],{"class":60,"line":103},8,[58,105,106],{},"console.log(evenNumbers); // [2, 4, 6, 8, 10]\n",[58,108,110],{"class":60,"line":109},9,[58,111,71],{"emptyLinePlaceholder":70},[58,113,115],{"class":60,"line":114},10,[58,116,117],{},"// some 메서드에서 Predicate 사용\n",[58,119,121],{"class":60,"line":120},11,[58,122,123],{},"const hasEvenNumber = numbers.some(isEven);\n",[58,125,127],{"class":60,"line":126},12,[58,128,129],{},"console.log(hasEvenNumber); // true\n",[43,131,133],{"id":132},"_2-객체-검증에서의-predicate","2. 객체 검증에서의 Predicate",[48,135,137],{"className":50,"code":136,"language":52,"meta":53,"style":53},"const user = {\n  name: \"홍길동\",\n  age: 25,\n  email: \"hong@example.com\",\n};\n\n// 유효성 검사를 위한 Predicate들\nconst isValidName = (name) => name.length >= 2;\nconst isValidAge = (age) => age >= 0 && age \u003C= 120;\nconst isValidEmail = (email) => email.includes(\"@\");\n\n// Predicate들을 조합하여 사용\nconst isValidUser = (user) =>\n  isValidName(user.name) && isValidAge(user.age) && isValidEmail(user.email);\n",[55,138,139,144,149,154,159,164,168,173,178,183,188,192,197,203],{"__ignoreMap":53},[58,140,141],{"class":60,"line":61},[58,142,143],{},"const user = {\n",[58,145,146],{"class":60,"line":67},[58,147,148],{},"  name: \"홍길동\",\n",[58,150,151],{"class":60,"line":74},[58,152,153],{},"  age: 25,\n",[58,155,156],{"class":60,"line":80},[58,157,158],{},"  email: \"hong@example.com\",\n",[58,160,161],{"class":60,"line":86},[58,162,163],{},"};\n",[58,165,166],{"class":60,"line":91},[58,167,71],{"emptyLinePlaceholder":70},[58,169,170],{"class":60,"line":97},[58,171,172],{},"// 유효성 검사를 위한 Predicate들\n",[58,174,175],{"class":60,"line":103},[58,176,177],{},"const isValidName = (name) => name.length >= 2;\n",[58,179,180],{"class":60,"line":109},[58,181,182],{},"const isValidAge = (age) => age >= 0 && age \u003C= 120;\n",[58,184,185],{"class":60,"line":114},[58,186,187],{},"const isValidEmail = (email) => email.includes(\"@\");\n",[58,189,190],{"class":60,"line":120},[58,191,71],{"emptyLinePlaceholder":70},[58,193,194],{"class":60,"line":126},[58,195,196],{},"// Predicate들을 조합하여 사용\n",[58,198,200],{"class":60,"line":199},13,[58,201,202],{},"const isValidUser = (user) =>\n",[58,204,206],{"class":60,"line":205},14,[58,207,208],{},"  isValidName(user.name) && isValidAge(user.age) && isValidEmail(user.email);\n",[18,210,212],{"id":211},"predicate의-장점","Predicate의 장점",[26,214,215,222,228,234],{},[29,216,217,221],{},[218,219,220],"strong",{},"재사용성",": 한 번 정의한 Predicate를 여러 곳에서 재사용할 수 있습니다.",[29,223,224,227],{},[218,225,226],{},"가독성",": 조건 로직을 명확하게 표현할 수 있습니다.",[29,229,230,233],{},[218,231,232],{},"유지보수성",": 조건 변경이 필요할 때 한 곳만 수정하면 됩니다.",[29,235,236,239],{},[218,237,238],{},"테스트 용이성",": Predicate는 순수 함수이므로 단위 테스트가 쉽습니다.",[18,241,243],{"id":242},"고급-predicate-활용","고급 Predicate 활용",[43,245,247],{"id":246},"_1-predicate-조합","1. Predicate 조합",[48,249,251],{"className":50,"code":250,"language":52,"meta":53,"style":53},"const isPositive = (num) => num > 0;\nconst isInteger = (num) => Number.isInteger(num);\n\n// Predicate 조합\nconst isPositiveInteger = (num) => isPositive(num) && isInteger(num);\n",[55,252,253,258,263,267,272],{"__ignoreMap":53},[58,254,255],{"class":60,"line":61},[58,256,257],{},"const isPositive = (num) => num > 0;\n",[58,259,260],{"class":60,"line":67},[58,261,262],{},"const isInteger = (num) => Number.isInteger(num);\n",[58,264,265],{"class":60,"line":74},[58,266,71],{"emptyLinePlaceholder":70},[58,268,269],{"class":60,"line":80},[58,270,271],{},"// Predicate 조합\n",[58,273,274],{"class":60,"line":86},[58,275,276],{},"const isPositiveInteger = (num) => isPositive(num) && isInteger(num);\n",[43,278,280],{"id":279},"_2-커링을-활용한-predicate","2. 커링을 활용한 Predicate",[48,282,284],{"className":50,"code":283,"language":52,"meta":53,"style":53},"const greaterThan = (threshold) => (value) => value > threshold;\nconst lessThan = (threshold) => (value) => value \u003C threshold;\n\nconst isBetween = (min, max) => (value) =>\n  greaterThan(min)(value) && lessThan(max)(value);\n\nconst isInRange = isBetween(0, 100);\nconsole.log(isInRange(50)); // true\n",[55,285,286,291,296,300,305,310,314,319],{"__ignoreMap":53},[58,287,288],{"class":60,"line":61},[58,289,290],{},"const greaterThan = (threshold) => (value) => value > threshold;\n",[58,292,293],{"class":60,"line":67},[58,294,295],{},"const lessThan = (threshold) => (value) => value \u003C threshold;\n",[58,297,298],{"class":60,"line":74},[58,299,71],{"emptyLinePlaceholder":70},[58,301,302],{"class":60,"line":80},[58,303,304],{},"const isBetween = (min, max) => (value) =>\n",[58,306,307],{"class":60,"line":86},[58,308,309],{},"  greaterThan(min)(value) && lessThan(max)(value);\n",[58,311,312],{"class":60,"line":91},[58,313,71],{"emptyLinePlaceholder":70},[58,315,316],{"class":60,"line":97},[58,317,318],{},"const isInRange = isBetween(0, 100);\n",[58,320,321],{"class":60,"line":103},[58,322,323],{},"console.log(isInRange(50)); // true\n",[18,325,326],{"id":326},"결론",[14,328,329],{},"Predicate는 자바스크립트에서 조건부 로직을 표현하는 강력한 도구입니다. 특히 배열 메서드나 객체 검증에서 자주 사용되며, 코드의 재사용성과 가독성을 높이는 데 도움을 줍니다. Predicate를 적절히 활용하면 더 깔끔하고 유지보수하기 쉬운 코드를 작성할 수 있습니다.",[331,332,333],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"title":53,"searchDepth":67,"depth":67,"links":335},[336,337,341,342,346],{"id":20,"depth":67,"text":21},{"id":40,"depth":67,"text":41,"children":338},[339,340],{"id":45,"depth":74,"text":46},{"id":132,"depth":74,"text":133},{"id":211,"depth":67,"text":212},{"id":242,"depth":67,"text":243,"children":343},[344,345],{"id":246,"depth":74,"text":247},{"id":279,"depth":74,"text":280},{"id":326,"depth":67,"text":326},"2025-03-30T00:00:00.000Z","자바스크립트에서 Predicate의 개념과 활용 방법에 대해 알아봅니다.","md",null,{},"/2025-03-30-javascript-predicate",{"title":5,"description":348},"2025-03-30-javascript-predicate",[356],"JavaScript","ywfp5iB8vv",1743315375764]