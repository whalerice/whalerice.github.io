[{"data":1,"prerenderedAt":701},["ShallowReactive",2],{"/2025-04-01-async-await":3},{"id":4,"title":5,"body":6,"date":688,"description":689,"extension":690,"image":691,"meta":692,"navigation":402,"path":693,"seo":694,"stem":695,"tags":696,"__hash__":700},"content/2025-04-01-async-await.md","JavaScript의 async/await 이해하기",{"type":7,"value":8,"toc":679},"minimal",[9,13,18,21,25,28,84,88,91,170,174,177,291,295,298,505,509,512,666,669,672,675],[10,11,12],"p",{},"JavaScript에서 비동기 프로그래밍을 처리하는 방법은 시간이 지날수록 더욱 발전해왔습니다. 콜백 함수에서 Promise, 그리고 현재 널리 사용되는 async/await까지. 이번 포스트에서는 async/await의 개념과 사용법에 대해 자세히 살펴보겠습니다.",[14,15,17],"h2",{"id":16},"asyncawait란","async/await란?",[10,19,20],{},"async/await는 Promise를 기반으로 한 문법적 설탕(syntactic sugar)입니다. 비동기 코드를 동기 코드처럼 보이게 만들어주어 코드의 가독성과 유지보수성을 크게 향상시킵니다.",[14,22,24],{"id":23},"async-함수","async 함수",[10,26,27],{},"async 키워드는 함수 선언 앞에 붙여서 사용합니다. 이 함수는 항상 Promise를 반환합니다.",[29,30,35],"pre",{"className":31,"code":32,"language":33,"meta":34,"style":34},"language-javascript shiki shiki-themes dracula","async function fetchData() {\n  return \"데이터\";\n}\n","javascript","",[36,37,38,58,78],"code",{"__ignoreMap":34},[39,40,43,47,50,54],"span",{"class":41,"line":42},"line",1,[39,44,46],{"class":45},"sRedq","async",[39,48,49],{"class":45}," function",[39,51,53],{"class":52},"s57r0"," fetchData",[39,55,57],{"class":56},"sddWA","() {\n",[39,59,61,64,68,72,75],{"class":41,"line":60},2,[39,62,63],{"class":45},"  return",[39,65,67],{"class":66},"syA0A"," \"",[39,69,71],{"class":70},"shai9","데이터",[39,73,74],{"class":66},"\"",[39,76,77],{"class":56},";\n",[39,79,81],{"class":41,"line":80},3,[39,82,83],{"class":56},"}\n",[14,85,87],{"id":86},"await-키워드","await 키워드",[10,89,90],{},"await는 async 함수 내부에서만 사용할 수 있으며, Promise가 resolve될 때까지 기다립니다.",[29,92,94],{"className":31,"code":93,"language":33,"meta":34,"style":34},"async function getUserData() {\n  const response = await fetch(\"https://api.example.com/user\");\n  const data = await response.json();\n  return data;\n}\n",[36,95,96,107,137,157,165],{"__ignoreMap":34},[39,97,98,100,102,105],{"class":41,"line":42},[39,99,46],{"class":45},[39,101,49],{"class":45},[39,103,104],{"class":52}," getUserData",[39,106,57],{"class":56},[39,108,109,112,115,118,121,124,127,129,132,134],{"class":41,"line":60},[39,110,111],{"class":45},"  const",[39,113,114],{"class":56}," response ",[39,116,117],{"class":45},"=",[39,119,120],{"class":45}," await",[39,122,123],{"class":52}," fetch",[39,125,126],{"class":56},"(",[39,128,74],{"class":66},[39,130,131],{"class":70},"https://api.example.com/user",[39,133,74],{"class":66},[39,135,136],{"class":56},");\n",[39,138,139,141,144,146,148,151,154],{"class":41,"line":80},[39,140,111],{"class":45},[39,142,143],{"class":56}," data ",[39,145,117],{"class":45},[39,147,120],{"class":45},[39,149,150],{"class":56}," response.",[39,152,153],{"class":52},"json",[39,155,156],{"class":56},"();\n",[39,158,160,162],{"class":41,"line":159},4,[39,161,63],{"class":45},[39,163,164],{"class":56}," data;\n",[39,166,168],{"class":41,"line":167},5,[39,169,83],{"class":56},[14,171,173],{"id":172},"에러-처리","에러 처리",[10,175,176],{},"try/catch 구문을 사용하여 async/await의 에러를 처리할 수 있습니다.",[29,178,180],{"className":31,"code":179,"language":33,"meta":34,"style":34},"async function fetchUserData() {\n  try {\n    const response = await fetch(\"https://api.example.com/user\");\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"데이터를 가져오는데 실패했습니다:\", error);\n  }\n}\n",[36,181,182,193,201,224,240,247,259,280,286],{"__ignoreMap":34},[39,183,184,186,188,191],{"class":41,"line":42},[39,185,46],{"class":45},[39,187,49],{"class":45},[39,189,190],{"class":52}," fetchUserData",[39,192,57],{"class":56},[39,194,195,198],{"class":41,"line":60},[39,196,197],{"class":45},"  try",[39,199,200],{"class":56}," {\n",[39,202,203,206,208,210,212,214,216,218,220,222],{"class":41,"line":80},[39,204,205],{"class":45},"    const",[39,207,114],{"class":56},[39,209,117],{"class":45},[39,211,120],{"class":45},[39,213,123],{"class":52},[39,215,126],{"class":56},[39,217,74],{"class":66},[39,219,131],{"class":70},[39,221,74],{"class":66},[39,223,136],{"class":56},[39,225,226,228,230,232,234,236,238],{"class":41,"line":159},[39,227,205],{"class":45},[39,229,143],{"class":56},[39,231,117],{"class":45},[39,233,120],{"class":45},[39,235,150],{"class":56},[39,237,153],{"class":52},[39,239,156],{"class":56},[39,241,242,245],{"class":41,"line":167},[39,243,244],{"class":45},"    return",[39,246,164],{"class":56},[39,248,250,253,256],{"class":41,"line":249},6,[39,251,252],{"class":56},"  } ",[39,254,255],{"class":45},"catch",[39,257,258],{"class":56}," (error) {\n",[39,260,262,265,268,270,272,275,277],{"class":41,"line":261},7,[39,263,264],{"class":56},"    console.",[39,266,267],{"class":52},"error",[39,269,126],{"class":56},[39,271,74],{"class":66},[39,273,274],{"class":70},"데이터를 가져오는데 실패했습니다:",[39,276,74],{"class":66},[39,278,279],{"class":56},", error);\n",[39,281,283],{"class":41,"line":282},8,[39,284,285],{"class":56},"  }\n",[39,287,289],{"class":41,"line":288},9,[39,290,83],{"class":56},[14,292,294],{"id":293},"promise와의-비교","Promise와의 비교",[10,296,297],{},"async/await를 사용하면 Promise 체인보다 더 읽기 쉽고 이해하기 쉬운 코드를 작성할 수 있습니다.",[29,299,301],{"className":31,"code":300,"language":33,"meta":34,"style":34},"// Promise 체인\nfetch(\"https://api.example.com/user\")\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error(error));\n\n// async/await\nasync function getUser() {\n  try {\n    const response = await fetch(\"https://api.example.com/user\");\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n",[36,302,303,309,325,353,377,398,404,409,420,426,449,466,476,485,495,500],{"__ignoreMap":34},[39,304,305],{"class":41,"line":42},[39,306,308],{"class":307},"si6LB","// Promise 체인\n",[39,310,311,314,316,318,320,322],{"class":41,"line":60},[39,312,313],{"class":52},"fetch",[39,315,126],{"class":56},[39,317,74],{"class":66},[39,319,131],{"class":70},[39,321,74],{"class":66},[39,323,324],{"class":56},")\n",[39,326,327,330,333,336,340,343,346,348,350],{"class":41,"line":80},[39,328,329],{"class":56},"  .",[39,331,332],{"class":52},"then",[39,334,335],{"class":56},"((",[39,337,339],{"class":338},"sDXMj","response",[39,341,342],{"class":56},") ",[39,344,345],{"class":45},"=>",[39,347,150],{"class":56},[39,349,153],{"class":52},[39,351,352],{"class":56},"())\n",[39,354,355,357,359,361,364,366,368,371,374],{"class":41,"line":159},[39,356,329],{"class":56},[39,358,332],{"class":52},[39,360,335],{"class":56},[39,362,363],{"class":338},"data",[39,365,342],{"class":56},[39,367,345],{"class":45},[39,369,370],{"class":56}," console.",[39,372,373],{"class":52},"log",[39,375,376],{"class":56},"(data))\n",[39,378,379,381,383,385,387,389,391,393,395],{"class":41,"line":167},[39,380,329],{"class":56},[39,382,255],{"class":52},[39,384,335],{"class":56},[39,386,267],{"class":338},[39,388,342],{"class":56},[39,390,345],{"class":45},[39,392,370],{"class":56},[39,394,267],{"class":52},[39,396,397],{"class":56},"(error));\n",[39,399,400],{"class":41,"line":249},[39,401,403],{"emptyLinePlaceholder":402},true,"\n",[39,405,406],{"class":41,"line":261},[39,407,408],{"class":307},"// async/await\n",[39,410,411,413,415,418],{"class":41,"line":282},[39,412,46],{"class":45},[39,414,49],{"class":45},[39,416,417],{"class":52}," getUser",[39,419,57],{"class":56},[39,421,422,424],{"class":41,"line":288},[39,423,197],{"class":45},[39,425,200],{"class":56},[39,427,429,431,433,435,437,439,441,443,445,447],{"class":41,"line":428},10,[39,430,205],{"class":45},[39,432,114],{"class":56},[39,434,117],{"class":45},[39,436,120],{"class":45},[39,438,123],{"class":52},[39,440,126],{"class":56},[39,442,74],{"class":66},[39,444,131],{"class":70},[39,446,74],{"class":66},[39,448,136],{"class":56},[39,450,452,454,456,458,460,462,464],{"class":41,"line":451},11,[39,453,205],{"class":45},[39,455,143],{"class":56},[39,457,117],{"class":45},[39,459,120],{"class":45},[39,461,150],{"class":56},[39,463,153],{"class":52},[39,465,156],{"class":56},[39,467,469,471,473],{"class":41,"line":468},12,[39,470,264],{"class":56},[39,472,373],{"class":52},[39,474,475],{"class":56},"(data);\n",[39,477,479,481,483],{"class":41,"line":478},13,[39,480,252],{"class":56},[39,482,255],{"class":45},[39,484,258],{"class":56},[39,486,488,490,492],{"class":41,"line":487},14,[39,489,264],{"class":56},[39,491,267],{"class":52},[39,493,494],{"class":56},"(error);\n",[39,496,498],{"class":41,"line":497},15,[39,499,285],{"class":56},[39,501,503],{"class":41,"line":502},16,[39,504,83],{"class":56},[14,506,508],{"id":507},"병렬-실행","병렬 실행",[10,510,511],{},"여러 비동기 작업을 병렬로 실행하려면 Promise.all()을 사용할 수 있습니다.",[29,513,515],{"className":31,"code":514,"language":33,"meta":34,"style":34},"async function fetchMultipleData() {\n  const [users, posts, comments] = await Promise.all([\n    fetch(\"/api/users\").then((res) => res.json()),\n    fetch(\"/api/posts\").then((res) => res.json()),\n    fetch(\"/api/comments\").then((res) => res.json()),\n  ]);\n  return { users, posts, comments };\n}\n",[36,516,517,528,552,588,619,650,655,662],{"__ignoreMap":34},[39,518,519,521,523,526],{"class":41,"line":42},[39,520,46],{"class":45},[39,522,49],{"class":45},[39,524,525],{"class":52}," fetchMultipleData",[39,527,57],{"class":56},[39,529,530,532,535,537,539,543,546,549],{"class":41,"line":60},[39,531,111],{"class":45},[39,533,534],{"class":56}," [users, posts, comments] ",[39,536,117],{"class":45},[39,538,120],{"class":45},[39,540,542],{"class":541},"s40py"," Promise",[39,544,545],{"class":56},".",[39,547,548],{"class":52},"all",[39,550,551],{"class":56},"([\n",[39,553,554,557,559,561,564,566,569,571,573,576,578,580,583,585],{"class":41,"line":80},[39,555,556],{"class":52},"    fetch",[39,558,126],{"class":56},[39,560,74],{"class":66},[39,562,563],{"class":70},"/api/users",[39,565,74],{"class":66},[39,567,568],{"class":56},").",[39,570,332],{"class":52},[39,572,335],{"class":56},[39,574,575],{"class":338},"res",[39,577,342],{"class":56},[39,579,345],{"class":45},[39,581,582],{"class":56}," res.",[39,584,153],{"class":52},[39,586,587],{"class":56},"()),\n",[39,589,590,592,594,596,599,601,603,605,607,609,611,613,615,617],{"class":41,"line":159},[39,591,556],{"class":52},[39,593,126],{"class":56},[39,595,74],{"class":66},[39,597,598],{"class":70},"/api/posts",[39,600,74],{"class":66},[39,602,568],{"class":56},[39,604,332],{"class":52},[39,606,335],{"class":56},[39,608,575],{"class":338},[39,610,342],{"class":56},[39,612,345],{"class":45},[39,614,582],{"class":56},[39,616,153],{"class":52},[39,618,587],{"class":56},[39,620,621,623,625,627,630,632,634,636,638,640,642,644,646,648],{"class":41,"line":167},[39,622,556],{"class":52},[39,624,126],{"class":56},[39,626,74],{"class":66},[39,628,629],{"class":70},"/api/comments",[39,631,74],{"class":66},[39,633,568],{"class":56},[39,635,332],{"class":52},[39,637,335],{"class":56},[39,639,575],{"class":338},[39,641,342],{"class":56},[39,643,345],{"class":45},[39,645,582],{"class":56},[39,647,153],{"class":52},[39,649,587],{"class":56},[39,651,652],{"class":41,"line":249},[39,653,654],{"class":56},"  ]);\n",[39,656,657,659],{"class":41,"line":261},[39,658,63],{"class":45},[39,660,661],{"class":56}," { users, posts, comments };\n",[39,663,664],{"class":41,"line":282},[39,665,83],{"class":56},[14,667,668],{"id":668},"결론",[10,670,671],{},"async/await는 JavaScript의 비동기 프로그래밍을 더욱 직관적이고 관리하기 쉽게 만들어주는 강력한 도구입니다. Promise를 기반으로 하면서도, 동기 코드처럼 보이는 비동기 코드를 작성할 수 있게 해주어 개발자들의 생산성을 크게 향상시킵니다.",[10,673,674],{},"이 문법을 적절히 활용하면 복잡한 비동기 로직도 깔끔하고 이해하기 쉽게 구현할 수 있습니다.",[676,677,678],"style",{},"html pre.shiki code .sRedq, html code.shiki .sRedq{--shiki-default:#FF79C6}html pre.shiki code .s57r0, html code.shiki .s57r0{--shiki-default:#50FA7B}html pre.shiki code .sddWA, html code.shiki .sddWA{--shiki-default:#F8F8F2}html pre.shiki code .syA0A, html code.shiki .syA0A{--shiki-default:#E9F284}html pre.shiki code .shai9, html code.shiki .shai9{--shiki-default:#F1FA8C}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html pre.shiki code .si6LB, html code.shiki .si6LB{--shiki-default:#6272A4}html pre.shiki code .sDXMj, html code.shiki .sDXMj{--shiki-default:#FFB86C;--shiki-default-font-style:italic}html pre.shiki code .s40py, html code.shiki .s40py{--shiki-default:#8BE9FD;--shiki-default-font-style:italic}",{"title":34,"searchDepth":60,"depth":60,"links":680},[681,682,683,684,685,686,687],{"id":16,"depth":60,"text":17},{"id":23,"depth":60,"text":24},{"id":86,"depth":60,"text":87},{"id":172,"depth":60,"text":173},{"id":293,"depth":60,"text":294},{"id":507,"depth":60,"text":508},{"id":668,"depth":60,"text":668},"2025-04-01T00:00:00.000Z","JavaScript에서 비동기 프로그래밍을 더 쉽게 만드는 async/await 문법에 대해 알아보겠습니다.","md",null,{},"/2025-04-01-async-await",{"title":5,"description":689},"2025-04-01-async-await",[697,698,699],"JavaScript","비동기 프로그래밍","async/await","zd02LF3dgf",1744460482422]