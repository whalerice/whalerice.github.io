import{f as O,g as u,h as D,s as B,i as j,j as M,k as P,l as E,m as H,n as w,p as R,q as S,v as V,x as z}from"./Cr1xoEBb.js";const K=s=>s==="defer"||s===!1;function F(...s){var g;const n=typeof s[s.length-1]=="string"?s.pop():void 0;typeof s[0]!="string"&&s.unshift(n);let[t,f,a={}]=s;if(typeof t!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof f!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");const e=O(),C=f,b=()=>u.value,p=()=>e.isHydrating?e.payload.data[t]:e.static.data[t];a.server??(a.server=!0),a.default??(a.default=b),a.getCachedData??(a.getCachedData=p),a.lazy??(a.lazy=!1),a.immediate??(a.immediate=!0),a.deep??(a.deep=u.deep),a.dedupe??(a.dedupe="cancel");const d=a.getCachedData(t,e),_=d!=null;if(!e._asyncData[t]||!a.immediate){(g=e.payload._errors)[t]??(g[t]=u.errorValue);const i=a.deep?D:B;e._asyncData[t]={data:i(_?d:a.default()),pending:D(!_),error:j(e.payload._errors,t),status:D("idle"),_default:a.default}}const r={...e._asyncData[t]};delete r._default,r.refresh=r.execute=(i={})=>{if(e._asyncDataPromises[t]){if(K(i.dedupe??a.dedupe))return e._asyncDataPromises[t];e._asyncDataPromises[t].cancelled=!0}if(i._initial||e.isHydrating&&i._initial!==!1){const l=i._initial?d:a.getCachedData(t,e);if(l!=null)return Promise.resolve(l)}r.pending.value=!0,r.status.value="pending";const o=new Promise((l,c)=>{try{l(C(e))}catch(y){c(y)}}).then(async l=>{if(o.cancelled)return e._asyncDataPromises[t];let c=l;a.transform&&(c=await a.transform(l)),a.pick&&(c=T(c,a.pick)),e.payload.data[t]=c,r.data.value=c,r.error.value=u.errorValue,r.status.value="success"}).catch(l=>{if(o.cancelled)return e._asyncDataPromises[t];r.error.value=H(l),r.data.value=w(a.default()),r.status.value="error"}).finally(()=>{o.cancelled||(r.pending.value=!1,delete e._asyncDataPromises[t])});return e._asyncDataPromises[t]=o,e._asyncDataPromises[t]},r.clear=()=>N(e,t);const h=()=>r.refresh({_initial:!0}),m=a.server!==!1&&e.payload.serverRendered;{const i=R();if(i&&m&&a.immediate&&!i.sp&&(i.sp=[]),i&&!i._nuxtOnBeforeMountCbs){i._nuxtOnBeforeMountCbs=[];const c=i._nuxtOnBeforeMountCbs;S(()=>{c.forEach(y=>{y()}),c.splice(0,c.length)}),V(()=>c.splice(0,c.length))}m&&e.isHydrating&&(r.error.value||d!=null)?(r.pending.value=!1,r.status.value=r.error.value?"error":"success"):i&&(e.payload.serverRendered&&e.isHydrating||a.lazy)&&a.immediate?i._nuxtOnBeforeMountCbs.push(h):a.immediate&&h();const o=E();if(a.watch){const c=M(a.watch,()=>r.refresh());o&&P(c)}const l=e.hook("app:data:refresh",async c=>{(!c||c.includes(t))&&await r.refresh()});o&&P(l)}const v=Promise.resolve(e._asyncDataPromises[t]).then(()=>r);return Object.assign(v,r),v}function N(s,n){n in s.payload.data&&(s.payload.data[n]=void 0),n in s.payload._errors&&(s.payload._errors[n]=u.errorValue),s._asyncData[n]&&(s._asyncData[n].data.value=w(s._asyncData[n]._default()),s._asyncData[n].error.value=u.errorValue,s._asyncData[n].pending.value=!1,s._asyncData[n].status.value="idle"),n in s._asyncDataPromises&&(s._asyncDataPromises[n]&&(s._asyncDataPromises[n].cancelled=!0),s._asyncDataPromises[n]=void 0)}function T(s,n){const t={};for(const f of n)t[f]=s[f];return t}function I(){return z}export{I as a,F as u};
